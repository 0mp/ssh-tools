#!/bin/bash

#
# TODO
#
# improve username handling. currently User from ssh_config get's ignored
# -q ?
# stats at last line
#

  BLACK=$(tput setaf 1)
    RED=$(tput setaf 1)
  GREEN=$(tput setaf 2)
 YELLOW=$(tput setaf 3)
   BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
   CYAN=$(tput setaf 6)
  WHITE=$(tput setaf 7)
   BOLD=$(tput bold   )
  RESET=$(tput sgr0   )

SSH_OPTS=(
    -o BatchMode=yes
    -o CheckHostIP=no
    -o StrictHostKeyChecking=no
    -o HashKnownHosts=no
)

SSH_FLAGS=()

ping_count=0
ping_interval=1
username="${USER}"
connect_timeout=16

function usage() {

cat << EOF

  Usage: $0 options [user@]host

  OPTIONS:
     -4             Use IPv4 only
     -6             Use IPv6 only
     -c count       Stop after sending <count> request packets
     -F configfile  Specifies an alternative per-user configuration file.
                    If a configuration file is given on the command line,
                    the system-wide configuration file (/etc/ssh/ssh_config) will be ignored.
                    The default for the per-user configuration file is ~/.ssh/config.

     -h             Show this message
     -i interval    Wait <interval> seconds between sending each request.
                    The default is to wait for 1 second between each request.
     -l user        Try login in with <user> as username.
                    The default is \$USER
     -D             Print timestamp (unix time + microseconds as in gettimeofday) before each line
     -W timeout     Time to wait for a response, in seconds
     -v             Verbose output

EOF

}

while getopts ":46c:F:hi:l:Dp:vW:" opt; do
  case ${opt} in
     4 )
       SSH_FLAGS+=("-4")
       ;;
     6 )
       SSH_FLAGS+=("-6")
       ;;
     c )
       [[ $OPTARG =~ ^[0-9]+$ ]] && ping_count=$OPTARG
       ;;
     F )
       SSH_FLAGS+=("-F")
       SSH_FLAGS+=("$OPTARG")
       ;;
     h )
       usage
       exit 1
       ;;
     i )
       ping_interval=$OPTARG
       ;;
     l )
       username=$OPTARG
       ;;
     D )
       print_timestamp="yes"
       ;;
     p )
       [[ $OPTARG =~ ^[0-9]+$ ]] && SSH_FLAGS+=("-p") && SSH_FLAGS+=("$OPTARG")
       ;;
     v )
       verbose="yes"
       ;;
     W )
       [[ $OPTARG =~ ^[0-9]+$ ]] && connect_timeout=$OPTARG
       ;;
    \? )
       echo "Invalid option: $OPTARG" 1>&2
       usage
       exit 1
      ;;
  esac
done

shift $((OPTIND - 1))

SSH_OPTS+=( -o ConnectTimeout=$connect_timeout )

if [[ $1 == *"@"* ]]; then
  host=$( echo ${1##*@} )
  username=$( echo ${1%%@*} )
else
  host=${1}
fi

[[ -z "${host}" ]] && { echo "No host mentioned" ; usage; exit 1; }

ssh_seq=1

echo "${BOLD}SSHPING${RESET} ${YELLOW}${host}${RESET}"

if [[ ${verbose} == yes ]]
  then
    echo "Debug: SSH_FLAGS ${SSH_FLAGS[@]}"
    echo "Debug: SSH_OPTS ${SSH_OPTS[@]}"
fi

while true
  do

    #
    # ping only $count times or forever if $count = 0
    #

    [[ ${ping_count} -gt 0 ]] && [[ ${ssh_seq} -gt ${ping_count} ]] && break

    timestamp=$(date +%s.%6N)
    start_request=$(date +%s%3N)

    status=$(ssh "${SSH_FLAGS[@]}" "${SSH_OPTS[@]}" "${username}@${host}" echo pong 2>&1 | grep -oE 'pong|denied')

    end_request=$(date +%s%3N)
    time_request=$((end_request-start_request))

    if [[ $status == pong ]] ; then
      [[ ${print_timestamp} == yes ]] && echo -n "${WHITE}[${RESET}${MAGENTA}${timestamp}${RESET}${WHITE}]${RESET} "
      echo "${GREEN}Pong${RESET} ${WHITE}from${RESET} ${YELLOW}${host}${RESET}${WHITE}: ssh_seq${RESET}=${RED}${ssh_seq}${RESET} ${WHITE}time${RESET}=${RED}${time_request}${RESET} ms"
    elif [[ $status == denied ]] ; then
      [[ ${print_timestamp} == yes ]] && echo -n "${WHITE}[${RESET}${MAGENTA}${timestamp}${RESET}${WHITE}]${RESET} "
      echo "${CYAN}Reply${RESET} ${WHITE}from${RESET} ${YELLOW}${host}${RESET}${WHITE}: ssh_seq${RESET}=${RED}${ssh_seq}${RESET} ${WHITE}time${RESET}=${RED}${time_request}${RESET} ms"
    fi

    ssh_seq=$((ssh_seq+1))

    #
    # Don't sleep if we do just 1 request
    #

    [[ ${ping_count} -eq 1 ]] || sleep ${ping_interval}

done
